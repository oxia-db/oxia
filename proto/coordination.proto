syntax = "proto3";

package coordination;

option go_package = "github.com/streamnative/oxia/proto";

import "proto/client.proto";

// controller -> node
service OxiaControl {
  rpc ShardAssignment(stream io.streamnative.oxia.proto.ShardAssignmentsResponse) returns (CoordinationShardAssignmentsResponse);

  rpc Fence(FenceRequest) returns (FenceResponse);
  rpc BecomeLeader(BecomeLeaderRequest) returns (BecomeLeaderResponse);
  rpc AddFollower(AddFollowerRequest) returns (AddFollowerResponse);

  rpc GetStatus(GetStatusRequest) returns (GetStatusResponse);
}

// node (leader) -> node (follower)
service OxiaLogReplication {
  rpc Truncate(TruncateRequest) returns (TruncateResponse);
  rpc AddEntries(stream AddEntryRequest) returns (stream AddEntryResponse);
  rpc SendSnapshot(stream SnapshotChunk) returns (SnapshotResponse);
}

message CoordinationShardAssignmentsResponse {}

message EntryId {
  int64 epoch = 1;
  int64 offset = 2;
}

message LogEntry {
  int64 epoch = 1;
  int64 offset = 2;
  bytes value = 3;
  fixed64 timestamp = 4;
}

message SnapshotChunk {
  int64 epoch = 1;
  string name = 2;
  bytes content = 3;
}

message FenceRequest {
  uint32 shard_id = 1;
  int64 epoch = 2;
}

message FenceResponse {
  EntryId head_index = 2;
}

message BecomeLeaderRequest {
  uint32 shard_id = 1;

  int64 epoch = 2;
  uint32 replication_factor = 3;
  map<string, EntryId> follower_maps = 4;
}

message AddFollowerRequest {
  uint32 shard_id = 1;

  int64 epoch = 2;
  string follower_name = 3;
  EntryId follower_head_index = 4;
}

message BecomeLeaderResponse {
}

message AddFollowerResponse {
}

message TruncateRequest {
  uint32 shard_id = 1;

  int64 epoch = 2;
  EntryId head_index = 3;
}

message TruncateResponse {
  EntryId head_index = 2;
}

message AddEntryRequest {
  int64 epoch = 1;
  LogEntry entry = 2;
  int64 commit_index = 3;
}

message AddEntryResponse {
  int64 offset = 2;
}

message SnapshotResponse {
  int64 ack_index = 1;
}

//// Status RPC

message GetStatusRequest {
  uint32 shard_id = 1;
}

enum ServingStatus {
  NotMember = 0;
  Fenced    = 1;
  Follower  = 2;
  Leader    = 3;
}

message GetStatusResponse {
  int64 epoch = 1;
  ServingStatus status = 2;

  // More info to add for leaders
  // ensemble, lag for each follower, etc...
}
