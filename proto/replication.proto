// Copyright 2023 StreamNative, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package replication;

import "client.proto";

option go_package = "github.com/streamnative/oxia/proto";

// coordinator -> node
service OxiaCoordination {
  rpc PushShardAssignments(stream io.streamnative.oxia.proto.ShardAssignments)
      returns (CoordinationShardAssignmentsResponse);

  rpc NewTerm(NewTermRequest) returns (NewTermResponse);
  rpc BecomeLeader(BecomeLeaderRequest) returns (BecomeLeaderResponse);
  rpc AddFollower(AddFollowerRequest) returns (AddFollowerResponse);

  rpc GetStatus(GetStatusRequest) returns (GetStatusResponse);
}

// node (leader) -> node (follower)
service OxiaLogReplication {
  rpc Truncate(TruncateRequest) returns (TruncateResponse);
  rpc Replicate(stream Append) returns (stream Ack);
  rpc SendSnapshot(stream SnapshotChunk) returns (SnapshotResponse);
}

message CoordinationShardAssignmentsResponse {}

message EntryId {
  int64 term = 1;
  int64 offset = 2;
}

message LogEntry {
  int64 term = 1;
  int64 offset = 2;
  bytes value = 3;
  fixed64 timestamp = 4;
}

message SnapshotChunk {
  int64 term = 1;
  string name = 2;
  bytes content = 3;
  int32 chunk_index = 4;
  int32 chunk_count = 5;
}

message NewTermRequest {
  uint32 shard_id = 1;
  int64 term = 2;
}

message NewTermResponse {
  EntryId head_entry_id = 1;
}

message BecomeLeaderRequest {
  uint32 shard_id = 1;

  int64 term = 2;
  uint32 replication_factor = 3;
  map<string, EntryId> follower_maps = 4;
}

message AddFollowerRequest {
  uint32 shard_id = 1;

  int64 term = 2;
  string follower_name = 3;
  EntryId follower_head_entry_id = 4;
}

message BecomeLeaderResponse {}

message AddFollowerResponse {}

message TruncateRequest {
  uint32 shard_id = 1;

  int64 term = 2;
  EntryId head_entry_id = 3;
}

message TruncateResponse {
  EntryId head_entry_id = 1;
}

message Append {
  int64 term = 1;
  LogEntry entry = 2;
  int64 commit_offset = 3;
}

message Ack {
  int64 offset = 1;
}

message SnapshotResponse {
  int64 ack_offset = 1;
}

//// Status RPC

message GetStatusRequest {
  uint32 shard_id = 1;
}

enum ServingStatus {
  NOT_MEMBER = 0;
  FENCED = 1;
  FOLLOWER = 2;
  LEADER = 3;
}

message GetStatusResponse {
  int64 term = 1;
  ServingStatus status = 2;

  // More info to add for leaders
  // ensemble, lag for each follower, etc...
}
