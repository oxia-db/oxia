// Copyright 2023 StreamNative, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.1
// source: replication.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	OxiaCoordination_PushShardAssignments_FullMethodName = "/replication.OxiaCoordination/PushShardAssignments"
	OxiaCoordination_NewTerm_FullMethodName              = "/replication.OxiaCoordination/NewTerm"
	OxiaCoordination_BecomeLeader_FullMethodName         = "/replication.OxiaCoordination/BecomeLeader"
	OxiaCoordination_AddFollower_FullMethodName          = "/replication.OxiaCoordination/AddFollower"
	OxiaCoordination_GetStatus_FullMethodName            = "/replication.OxiaCoordination/GetStatus"
	OxiaCoordination_DeleteShard_FullMethodName          = "/replication.OxiaCoordination/DeleteShard"
)

// OxiaCoordinationClient is the client API for OxiaCoordination service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// coordinator -> node
type OxiaCoordinationClient interface {
	PushShardAssignments(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ShardAssignments, CoordinationShardAssignmentsResponse], error)
	NewTerm(ctx context.Context, in *NewTermRequest, opts ...grpc.CallOption) (*NewTermResponse, error)
	BecomeLeader(ctx context.Context, in *BecomeLeaderRequest, opts ...grpc.CallOption) (*BecomeLeaderResponse, error)
	AddFollower(ctx context.Context, in *AddFollowerRequest, opts ...grpc.CallOption) (*AddFollowerResponse, error)
	GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error)
	DeleteShard(ctx context.Context, in *DeleteShardRequest, opts ...grpc.CallOption) (*DeleteShardResponse, error)
}

type oxiaCoordinationClient struct {
	cc grpc.ClientConnInterface
}

func NewOxiaCoordinationClient(cc grpc.ClientConnInterface) OxiaCoordinationClient {
	return &oxiaCoordinationClient{cc}
}

func (c *oxiaCoordinationClient) PushShardAssignments(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[ShardAssignments, CoordinationShardAssignmentsResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OxiaCoordination_ServiceDesc.Streams[0], OxiaCoordination_PushShardAssignments_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ShardAssignments, CoordinationShardAssignmentsResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OxiaCoordination_PushShardAssignmentsClient = grpc.ClientStreamingClient[ShardAssignments, CoordinationShardAssignmentsResponse]

func (c *oxiaCoordinationClient) NewTerm(ctx context.Context, in *NewTermRequest, opts ...grpc.CallOption) (*NewTermResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NewTermResponse)
	err := c.cc.Invoke(ctx, OxiaCoordination_NewTerm_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oxiaCoordinationClient) BecomeLeader(ctx context.Context, in *BecomeLeaderRequest, opts ...grpc.CallOption) (*BecomeLeaderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BecomeLeaderResponse)
	err := c.cc.Invoke(ctx, OxiaCoordination_BecomeLeader_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oxiaCoordinationClient) AddFollower(ctx context.Context, in *AddFollowerRequest, opts ...grpc.CallOption) (*AddFollowerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddFollowerResponse)
	err := c.cc.Invoke(ctx, OxiaCoordination_AddFollower_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oxiaCoordinationClient) GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStatusResponse)
	err := c.cc.Invoke(ctx, OxiaCoordination_GetStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oxiaCoordinationClient) DeleteShard(ctx context.Context, in *DeleteShardRequest, opts ...grpc.CallOption) (*DeleteShardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteShardResponse)
	err := c.cc.Invoke(ctx, OxiaCoordination_DeleteShard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OxiaCoordinationServer is the server API for OxiaCoordination service.
// All implementations must embed UnimplementedOxiaCoordinationServer
// for forward compatibility.
//
// coordinator -> node
type OxiaCoordinationServer interface {
	PushShardAssignments(grpc.ClientStreamingServer[ShardAssignments, CoordinationShardAssignmentsResponse]) error
	NewTerm(context.Context, *NewTermRequest) (*NewTermResponse, error)
	BecomeLeader(context.Context, *BecomeLeaderRequest) (*BecomeLeaderResponse, error)
	AddFollower(context.Context, *AddFollowerRequest) (*AddFollowerResponse, error)
	GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error)
	DeleteShard(context.Context, *DeleteShardRequest) (*DeleteShardResponse, error)
	mustEmbedUnimplementedOxiaCoordinationServer()
}

// UnimplementedOxiaCoordinationServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOxiaCoordinationServer struct{}

func (UnimplementedOxiaCoordinationServer) PushShardAssignments(grpc.ClientStreamingServer[ShardAssignments, CoordinationShardAssignmentsResponse]) error {
	return status.Errorf(codes.Unimplemented, "method PushShardAssignments not implemented")
}
func (UnimplementedOxiaCoordinationServer) NewTerm(context.Context, *NewTermRequest) (*NewTermResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewTerm not implemented")
}
func (UnimplementedOxiaCoordinationServer) BecomeLeader(context.Context, *BecomeLeaderRequest) (*BecomeLeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BecomeLeader not implemented")
}
func (UnimplementedOxiaCoordinationServer) AddFollower(context.Context, *AddFollowerRequest) (*AddFollowerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFollower not implemented")
}
func (UnimplementedOxiaCoordinationServer) GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (UnimplementedOxiaCoordinationServer) DeleteShard(context.Context, *DeleteShardRequest) (*DeleteShardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteShard not implemented")
}
func (UnimplementedOxiaCoordinationServer) mustEmbedUnimplementedOxiaCoordinationServer() {}
func (UnimplementedOxiaCoordinationServer) testEmbeddedByValue()                          {}

// UnsafeOxiaCoordinationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OxiaCoordinationServer will
// result in compilation errors.
type UnsafeOxiaCoordinationServer interface {
	mustEmbedUnimplementedOxiaCoordinationServer()
}

func RegisterOxiaCoordinationServer(s grpc.ServiceRegistrar, srv OxiaCoordinationServer) {
	// If the following call pancis, it indicates UnimplementedOxiaCoordinationServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OxiaCoordination_ServiceDesc, srv)
}

func _OxiaCoordination_PushShardAssignments_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OxiaCoordinationServer).PushShardAssignments(&grpc.GenericServerStream[ShardAssignments, CoordinationShardAssignmentsResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OxiaCoordination_PushShardAssignmentsServer = grpc.ClientStreamingServer[ShardAssignments, CoordinationShardAssignmentsResponse]

func _OxiaCoordination_NewTerm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewTermRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OxiaCoordinationServer).NewTerm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OxiaCoordination_NewTerm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OxiaCoordinationServer).NewTerm(ctx, req.(*NewTermRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OxiaCoordination_BecomeLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BecomeLeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OxiaCoordinationServer).BecomeLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OxiaCoordination_BecomeLeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OxiaCoordinationServer).BecomeLeader(ctx, req.(*BecomeLeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OxiaCoordination_AddFollower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFollowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OxiaCoordinationServer).AddFollower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OxiaCoordination_AddFollower_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OxiaCoordinationServer).AddFollower(ctx, req.(*AddFollowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OxiaCoordination_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OxiaCoordinationServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OxiaCoordination_GetStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OxiaCoordinationServer).GetStatus(ctx, req.(*GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OxiaCoordination_DeleteShard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteShardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OxiaCoordinationServer).DeleteShard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OxiaCoordination_DeleteShard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OxiaCoordinationServer).DeleteShard(ctx, req.(*DeleteShardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OxiaCoordination_ServiceDesc is the grpc.ServiceDesc for OxiaCoordination service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OxiaCoordination_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "replication.OxiaCoordination",
	HandlerType: (*OxiaCoordinationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewTerm",
			Handler:    _OxiaCoordination_NewTerm_Handler,
		},
		{
			MethodName: "BecomeLeader",
			Handler:    _OxiaCoordination_BecomeLeader_Handler,
		},
		{
			MethodName: "AddFollower",
			Handler:    _OxiaCoordination_AddFollower_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _OxiaCoordination_GetStatus_Handler,
		},
		{
			MethodName: "DeleteShard",
			Handler:    _OxiaCoordination_DeleteShard_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PushShardAssignments",
			Handler:       _OxiaCoordination_PushShardAssignments_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "replication.proto",
}

const (
	OxiaLogReplication_Truncate_FullMethodName     = "/replication.OxiaLogReplication/Truncate"
	OxiaLogReplication_Replicate_FullMethodName    = "/replication.OxiaLogReplication/Replicate"
	OxiaLogReplication_SendSnapshot_FullMethodName = "/replication.OxiaLogReplication/SendSnapshot"
)

// OxiaLogReplicationClient is the client API for OxiaLogReplication service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// node (leader) -> node (follower)
type OxiaLogReplicationClient interface {
	Truncate(ctx context.Context, in *TruncateRequest, opts ...grpc.CallOption) (*TruncateResponse, error)
	Replicate(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Append, Ack], error)
	SendSnapshot(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SnapshotChunk, SnapshotResponse], error)
}

type oxiaLogReplicationClient struct {
	cc grpc.ClientConnInterface
}

func NewOxiaLogReplicationClient(cc grpc.ClientConnInterface) OxiaLogReplicationClient {
	return &oxiaLogReplicationClient{cc}
}

func (c *oxiaLogReplicationClient) Truncate(ctx context.Context, in *TruncateRequest, opts ...grpc.CallOption) (*TruncateResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TruncateResponse)
	err := c.cc.Invoke(ctx, OxiaLogReplication_Truncate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oxiaLogReplicationClient) Replicate(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[Append, Ack], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OxiaLogReplication_ServiceDesc.Streams[0], OxiaLogReplication_Replicate_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[Append, Ack]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OxiaLogReplication_ReplicateClient = grpc.BidiStreamingClient[Append, Ack]

func (c *oxiaLogReplicationClient) SendSnapshot(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[SnapshotChunk, SnapshotResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &OxiaLogReplication_ServiceDesc.Streams[1], OxiaLogReplication_SendSnapshot_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SnapshotChunk, SnapshotResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OxiaLogReplication_SendSnapshotClient = grpc.ClientStreamingClient[SnapshotChunk, SnapshotResponse]

// OxiaLogReplicationServer is the server API for OxiaLogReplication service.
// All implementations must embed UnimplementedOxiaLogReplicationServer
// for forward compatibility.
//
// node (leader) -> node (follower)
type OxiaLogReplicationServer interface {
	Truncate(context.Context, *TruncateRequest) (*TruncateResponse, error)
	Replicate(grpc.BidiStreamingServer[Append, Ack]) error
	SendSnapshot(grpc.ClientStreamingServer[SnapshotChunk, SnapshotResponse]) error
	mustEmbedUnimplementedOxiaLogReplicationServer()
}

// UnimplementedOxiaLogReplicationServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedOxiaLogReplicationServer struct{}

func (UnimplementedOxiaLogReplicationServer) Truncate(context.Context, *TruncateRequest) (*TruncateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Truncate not implemented")
}
func (UnimplementedOxiaLogReplicationServer) Replicate(grpc.BidiStreamingServer[Append, Ack]) error {
	return status.Errorf(codes.Unimplemented, "method Replicate not implemented")
}
func (UnimplementedOxiaLogReplicationServer) SendSnapshot(grpc.ClientStreamingServer[SnapshotChunk, SnapshotResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SendSnapshot not implemented")
}
func (UnimplementedOxiaLogReplicationServer) mustEmbedUnimplementedOxiaLogReplicationServer() {}
func (UnimplementedOxiaLogReplicationServer) testEmbeddedByValue()                            {}

// UnsafeOxiaLogReplicationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OxiaLogReplicationServer will
// result in compilation errors.
type UnsafeOxiaLogReplicationServer interface {
	mustEmbedUnimplementedOxiaLogReplicationServer()
}

func RegisterOxiaLogReplicationServer(s grpc.ServiceRegistrar, srv OxiaLogReplicationServer) {
	// If the following call pancis, it indicates UnimplementedOxiaLogReplicationServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&OxiaLogReplication_ServiceDesc, srv)
}

func _OxiaLogReplication_Truncate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TruncateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OxiaLogReplicationServer).Truncate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: OxiaLogReplication_Truncate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OxiaLogReplicationServer).Truncate(ctx, req.(*TruncateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OxiaLogReplication_Replicate_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OxiaLogReplicationServer).Replicate(&grpc.GenericServerStream[Append, Ack]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OxiaLogReplication_ReplicateServer = grpc.BidiStreamingServer[Append, Ack]

func _OxiaLogReplication_SendSnapshot_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OxiaLogReplicationServer).SendSnapshot(&grpc.GenericServerStream[SnapshotChunk, SnapshotResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type OxiaLogReplication_SendSnapshotServer = grpc.ClientStreamingServer[SnapshotChunk, SnapshotResponse]

// OxiaLogReplication_ServiceDesc is the grpc.ServiceDesc for OxiaLogReplication service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OxiaLogReplication_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "replication.OxiaLogReplication",
	HandlerType: (*OxiaLogReplicationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Truncate",
			Handler:    _OxiaLogReplication_Truncate_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Replicate",
			Handler:       _OxiaLogReplication_Replicate_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SendSnapshot",
			Handler:       _OxiaLogReplication_SendSnapshot_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "replication.proto",
}
