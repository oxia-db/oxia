// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: compat/client_grpc_sn.proto

package compat

import (
	context "context"
	proto "github.com/oxia-db/oxia/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OxiaClientClient is the client API for OxiaClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OxiaClientClient interface {
	GetShardAssignments(ctx context.Context, in *proto.ShardAssignmentsRequest, opts ...grpc.CallOption) (OxiaClient_GetShardAssignmentsClient, error)
	Write(ctx context.Context, in *proto.WriteRequest, opts ...grpc.CallOption) (*proto.WriteResponse, error)
	WriteStream(ctx context.Context, opts ...grpc.CallOption) (OxiaClient_WriteStreamClient, error)
	Read(ctx context.Context, in *proto.ReadRequest, opts ...grpc.CallOption) (OxiaClient_ReadClient, error)
	List(ctx context.Context, in *proto.ListRequest, opts ...grpc.CallOption) (OxiaClient_ListClient, error)
	RangeScan(ctx context.Context, in *proto.RangeScanRequest, opts ...grpc.CallOption) (OxiaClient_RangeScanClient, error)
	GetSequenceUpdates(ctx context.Context, in *proto.GetSequenceUpdatesRequest, opts ...grpc.CallOption) (OxiaClient_GetSequenceUpdatesClient, error)
	GetNotifications(ctx context.Context, in *proto.NotificationsRequest, opts ...grpc.CallOption) (OxiaClient_GetNotificationsClient, error)
	CreateSession(ctx context.Context, in *proto.CreateSessionRequest, opts ...grpc.CallOption) (*proto.CreateSessionResponse, error)
	KeepAlive(ctx context.Context, in *proto.SessionHeartbeat, opts ...grpc.CallOption) (*proto.KeepAliveResponse, error)
	CloseSession(ctx context.Context, in *proto.CloseSessionRequest, opts ...grpc.CallOption) (*proto.CloseSessionResponse, error)
}

type oxiaClientClient struct {
	cc grpc.ClientConnInterface
}

func NewOxiaClientClient(cc grpc.ClientConnInterface) OxiaClientClient {
	return &oxiaClientClient{cc}
}

func (c *oxiaClientClient) GetShardAssignments(ctx context.Context, in *proto.ShardAssignmentsRequest, opts ...grpc.CallOption) (OxiaClient_GetShardAssignmentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &OxiaClient_ServiceDesc.Streams[0], "/io.streamnative.oxia.proto.OxiaClient/GetShardAssignments", opts...)
	if err != nil {
		return nil, err
	}
	x := &oxiaClientGetShardAssignmentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OxiaClient_GetShardAssignmentsClient interface {
	Recv() (*proto.ShardAssignments, error)
	grpc.ClientStream
}

type oxiaClientGetShardAssignmentsClient struct {
	grpc.ClientStream
}

func (x *oxiaClientGetShardAssignmentsClient) Recv() (*proto.ShardAssignments, error) {
	m := new(proto.ShardAssignments)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *oxiaClientClient) Write(ctx context.Context, in *proto.WriteRequest, opts ...grpc.CallOption) (*proto.WriteResponse, error) {
	out := new(proto.WriteResponse)
	err := c.cc.Invoke(ctx, "/io.streamnative.oxia.proto.OxiaClient/Write", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oxiaClientClient) WriteStream(ctx context.Context, opts ...grpc.CallOption) (OxiaClient_WriteStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &OxiaClient_ServiceDesc.Streams[1], "/io.streamnative.oxia.proto.OxiaClient/WriteStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &oxiaClientWriteStreamClient{stream}
	return x, nil
}

type OxiaClient_WriteStreamClient interface {
	Send(*proto.WriteRequest) error
	Recv() (*proto.WriteResponse, error)
	grpc.ClientStream
}

type oxiaClientWriteStreamClient struct {
	grpc.ClientStream
}

func (x *oxiaClientWriteStreamClient) Send(m *proto.WriteRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *oxiaClientWriteStreamClient) Recv() (*proto.WriteResponse, error) {
	m := new(proto.WriteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *oxiaClientClient) Read(ctx context.Context, in *proto.ReadRequest, opts ...grpc.CallOption) (OxiaClient_ReadClient, error) {
	stream, err := c.cc.NewStream(ctx, &OxiaClient_ServiceDesc.Streams[2], "/io.streamnative.oxia.proto.OxiaClient/Read", opts...)
	if err != nil {
		return nil, err
	}
	x := &oxiaClientReadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OxiaClient_ReadClient interface {
	Recv() (*proto.ReadResponse, error)
	grpc.ClientStream
}

type oxiaClientReadClient struct {
	grpc.ClientStream
}

func (x *oxiaClientReadClient) Recv() (*proto.ReadResponse, error) {
	m := new(proto.ReadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *oxiaClientClient) List(ctx context.Context, in *proto.ListRequest, opts ...grpc.CallOption) (OxiaClient_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &OxiaClient_ServiceDesc.Streams[3], "/io.streamnative.oxia.proto.OxiaClient/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &oxiaClientListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OxiaClient_ListClient interface {
	Recv() (*proto.ListResponse, error)
	grpc.ClientStream
}

type oxiaClientListClient struct {
	grpc.ClientStream
}

func (x *oxiaClientListClient) Recv() (*proto.ListResponse, error) {
	m := new(proto.ListResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *oxiaClientClient) RangeScan(ctx context.Context, in *proto.RangeScanRequest, opts ...grpc.CallOption) (OxiaClient_RangeScanClient, error) {
	stream, err := c.cc.NewStream(ctx, &OxiaClient_ServiceDesc.Streams[4], "/io.streamnative.oxia.proto.OxiaClient/RangeScan", opts...)
	if err != nil {
		return nil, err
	}
	x := &oxiaClientRangeScanClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OxiaClient_RangeScanClient interface {
	Recv() (*proto.RangeScanResponse, error)
	grpc.ClientStream
}

type oxiaClientRangeScanClient struct {
	grpc.ClientStream
}

func (x *oxiaClientRangeScanClient) Recv() (*proto.RangeScanResponse, error) {
	m := new(proto.RangeScanResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *oxiaClientClient) GetSequenceUpdates(ctx context.Context, in *proto.GetSequenceUpdatesRequest, opts ...grpc.CallOption) (OxiaClient_GetSequenceUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &OxiaClient_ServiceDesc.Streams[5], "/io.streamnative.oxia.proto.OxiaClient/GetSequenceUpdates", opts...)
	if err != nil {
		return nil, err
	}
	x := &oxiaClientGetSequenceUpdatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OxiaClient_GetSequenceUpdatesClient interface {
	Recv() (*proto.GetSequenceUpdatesResponse, error)
	grpc.ClientStream
}

type oxiaClientGetSequenceUpdatesClient struct {
	grpc.ClientStream
}

func (x *oxiaClientGetSequenceUpdatesClient) Recv() (*proto.GetSequenceUpdatesResponse, error) {
	m := new(proto.GetSequenceUpdatesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *oxiaClientClient) GetNotifications(ctx context.Context, in *proto.NotificationsRequest, opts ...grpc.CallOption) (OxiaClient_GetNotificationsClient, error) {
	stream, err := c.cc.NewStream(ctx, &OxiaClient_ServiceDesc.Streams[6], "/io.streamnative.oxia.proto.OxiaClient/GetNotifications", opts...)
	if err != nil {
		return nil, err
	}
	x := &oxiaClientGetNotificationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type OxiaClient_GetNotificationsClient interface {
	Recv() (*proto.NotificationBatch, error)
	grpc.ClientStream
}

type oxiaClientGetNotificationsClient struct {
	grpc.ClientStream
}

func (x *oxiaClientGetNotificationsClient) Recv() (*proto.NotificationBatch, error) {
	m := new(proto.NotificationBatch)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *oxiaClientClient) CreateSession(ctx context.Context, in *proto.CreateSessionRequest, opts ...grpc.CallOption) (*proto.CreateSessionResponse, error) {
	out := new(proto.CreateSessionResponse)
	err := c.cc.Invoke(ctx, "/io.streamnative.oxia.proto.OxiaClient/CreateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oxiaClientClient) KeepAlive(ctx context.Context, in *proto.SessionHeartbeat, opts ...grpc.CallOption) (*proto.KeepAliveResponse, error) {
	out := new(proto.KeepAliveResponse)
	err := c.cc.Invoke(ctx, "/io.streamnative.oxia.proto.OxiaClient/KeepAlive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *oxiaClientClient) CloseSession(ctx context.Context, in *proto.CloseSessionRequest, opts ...grpc.CallOption) (*proto.CloseSessionResponse, error) {
	out := new(proto.CloseSessionResponse)
	err := c.cc.Invoke(ctx, "/io.streamnative.oxia.proto.OxiaClient/CloseSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OxiaClientServer is the server API for OxiaClient service.
// All implementations must embed UnimplementedOxiaClientServer
// for forward compatibility
type OxiaClientServer interface {
	GetShardAssignments(*proto.ShardAssignmentsRequest, OxiaClient_GetShardAssignmentsServer) error
	Write(context.Context, *proto.WriteRequest) (*proto.WriteResponse, error)
	WriteStream(OxiaClient_WriteStreamServer) error
	Read(*proto.ReadRequest, OxiaClient_ReadServer) error
	List(*proto.ListRequest, OxiaClient_ListServer) error
	RangeScan(*proto.RangeScanRequest, OxiaClient_RangeScanServer) error
	GetSequenceUpdates(*proto.GetSequenceUpdatesRequest, OxiaClient_GetSequenceUpdatesServer) error
	GetNotifications(*proto.NotificationsRequest, OxiaClient_GetNotificationsServer) error
	CreateSession(context.Context, *proto.CreateSessionRequest) (*proto.CreateSessionResponse, error)
	KeepAlive(context.Context, *proto.SessionHeartbeat) (*proto.KeepAliveResponse, error)
	CloseSession(context.Context, *proto.CloseSessionRequest) (*proto.CloseSessionResponse, error)
	mustEmbedUnimplementedOxiaClientServer()
}

// UnimplementedOxiaClientServer must be embedded to have forward compatible implementations.
type UnimplementedOxiaClientServer struct {
}

func (UnimplementedOxiaClientServer) GetShardAssignments(*proto.ShardAssignmentsRequest, OxiaClient_GetShardAssignmentsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetShardAssignments not implemented")
}
func (UnimplementedOxiaClientServer) Write(context.Context, *proto.WriteRequest) (*proto.WriteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Write not implemented")
}
func (UnimplementedOxiaClientServer) WriteStream(OxiaClient_WriteStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method WriteStream not implemented")
}
func (UnimplementedOxiaClientServer) Read(*proto.ReadRequest, OxiaClient_ReadServer) error {
	return status.Errorf(codes.Unimplemented, "method Read not implemented")
}
func (UnimplementedOxiaClientServer) List(*proto.ListRequest, OxiaClient_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedOxiaClientServer) RangeScan(*proto.RangeScanRequest, OxiaClient_RangeScanServer) error {
	return status.Errorf(codes.Unimplemented, "method RangeScan not implemented")
}
func (UnimplementedOxiaClientServer) GetSequenceUpdates(*proto.GetSequenceUpdatesRequest, OxiaClient_GetSequenceUpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetSequenceUpdates not implemented")
}
func (UnimplementedOxiaClientServer) GetNotifications(*proto.NotificationsRequest, OxiaClient_GetNotificationsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetNotifications not implemented")
}
func (UnimplementedOxiaClientServer) CreateSession(context.Context, *proto.CreateSessionRequest) (*proto.CreateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (UnimplementedOxiaClientServer) KeepAlive(context.Context, *proto.SessionHeartbeat) (*proto.KeepAliveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeepAlive not implemented")
}
func (UnimplementedOxiaClientServer) CloseSession(context.Context, *proto.CloseSessionRequest) (*proto.CloseSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseSession not implemented")
}
func (UnimplementedOxiaClientServer) mustEmbedUnimplementedOxiaClientServer() {}

// UnsafeOxiaClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OxiaClientServer will
// result in compilation errors.
type UnsafeOxiaClientServer interface {
	mustEmbedUnimplementedOxiaClientServer()
}

func RegisterOxiaClientServer(s grpc.ServiceRegistrar, srv OxiaClientServer) {
	s.RegisterService(&OxiaClient_ServiceDesc, srv)
}

func _OxiaClient_GetShardAssignments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(proto.ShardAssignmentsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OxiaClientServer).GetShardAssignments(m, &oxiaClientGetShardAssignmentsServer{stream})
}

type OxiaClient_GetShardAssignmentsServer interface {
	Send(*proto.ShardAssignments) error
	grpc.ServerStream
}

type oxiaClientGetShardAssignmentsServer struct {
	grpc.ServerStream
}

func (x *oxiaClientGetShardAssignmentsServer) Send(m *proto.ShardAssignments) error {
	return x.ServerStream.SendMsg(m)
}

func _OxiaClient_Write_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.WriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OxiaClientServer).Write(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.streamnative.oxia.proto.OxiaClient/Write",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OxiaClientServer).Write(ctx, req.(*proto.WriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OxiaClient_WriteStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(OxiaClientServer).WriteStream(&oxiaClientWriteStreamServer{stream})
}

type OxiaClient_WriteStreamServer interface {
	Send(*proto.WriteResponse) error
	Recv() (*proto.WriteRequest, error)
	grpc.ServerStream
}

type oxiaClientWriteStreamServer struct {
	grpc.ServerStream
}

func (x *oxiaClientWriteStreamServer) Send(m *proto.WriteResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *oxiaClientWriteStreamServer) Recv() (*proto.WriteRequest, error) {
	m := new(proto.WriteRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _OxiaClient_Read_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(proto.ReadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OxiaClientServer).Read(m, &oxiaClientReadServer{stream})
}

type OxiaClient_ReadServer interface {
	Send(*proto.ReadResponse) error
	grpc.ServerStream
}

type oxiaClientReadServer struct {
	grpc.ServerStream
}

func (x *oxiaClientReadServer) Send(m *proto.ReadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _OxiaClient_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(proto.ListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OxiaClientServer).List(m, &oxiaClientListServer{stream})
}

type OxiaClient_ListServer interface {
	Send(*proto.ListResponse) error
	grpc.ServerStream
}

type oxiaClientListServer struct {
	grpc.ServerStream
}

func (x *oxiaClientListServer) Send(m *proto.ListResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _OxiaClient_RangeScan_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(proto.RangeScanRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OxiaClientServer).RangeScan(m, &oxiaClientRangeScanServer{stream})
}

type OxiaClient_RangeScanServer interface {
	Send(*proto.RangeScanResponse) error
	grpc.ServerStream
}

type oxiaClientRangeScanServer struct {
	grpc.ServerStream
}

func (x *oxiaClientRangeScanServer) Send(m *proto.RangeScanResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _OxiaClient_GetSequenceUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(proto.GetSequenceUpdatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OxiaClientServer).GetSequenceUpdates(m, &oxiaClientGetSequenceUpdatesServer{stream})
}

type OxiaClient_GetSequenceUpdatesServer interface {
	Send(*proto.GetSequenceUpdatesResponse) error
	grpc.ServerStream
}

type oxiaClientGetSequenceUpdatesServer struct {
	grpc.ServerStream
}

func (x *oxiaClientGetSequenceUpdatesServer) Send(m *proto.GetSequenceUpdatesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _OxiaClient_GetNotifications_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(proto.NotificationsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(OxiaClientServer).GetNotifications(m, &oxiaClientGetNotificationsServer{stream})
}

type OxiaClient_GetNotificationsServer interface {
	Send(*proto.NotificationBatch) error
	grpc.ServerStream
}

type oxiaClientGetNotificationsServer struct {
	grpc.ServerStream
}

func (x *oxiaClientGetNotificationsServer) Send(m *proto.NotificationBatch) error {
	return x.ServerStream.SendMsg(m)
}

func _OxiaClient_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OxiaClientServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.streamnative.oxia.proto.OxiaClient/CreateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OxiaClientServer).CreateSession(ctx, req.(*proto.CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OxiaClient_KeepAlive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.SessionHeartbeat)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OxiaClientServer).KeepAlive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.streamnative.oxia.proto.OxiaClient/KeepAlive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OxiaClientServer).KeepAlive(ctx, req.(*proto.SessionHeartbeat))
	}
	return interceptor(ctx, in, info, handler)
}

func _OxiaClient_CloseSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(proto.CloseSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OxiaClientServer).CloseSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/io.streamnative.oxia.proto.OxiaClient/CloseSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OxiaClientServer).CloseSession(ctx, req.(*proto.CloseSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OxiaClient_ServiceDesc is the grpc.ServiceDesc for OxiaClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OxiaClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "io.streamnative.oxia.proto.OxiaClient",
	HandlerType: (*OxiaClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Write",
			Handler:    _OxiaClient_Write_Handler,
		},
		{
			MethodName: "CreateSession",
			Handler:    _OxiaClient_CreateSession_Handler,
		},
		{
			MethodName: "KeepAlive",
			Handler:    _OxiaClient_KeepAlive_Handler,
		},
		{
			MethodName: "CloseSession",
			Handler:    _OxiaClient_CloseSession_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetShardAssignments",
			Handler:       _OxiaClient_GetShardAssignments_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WriteStream",
			Handler:       _OxiaClient_WriteStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Read",
			Handler:       _OxiaClient_Read_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "List",
			Handler:       _OxiaClient_List_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RangeScan",
			Handler:       _OxiaClient_RangeScan_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetSequenceUpdates",
			Handler:       _OxiaClient_GetSequenceUpdates_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetNotifications",
			Handler:       _OxiaClient_GetNotifications_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "compat/client_grpc_sn.proto",
}
